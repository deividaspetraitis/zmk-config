/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/rgb.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/outputs.h>

/* Layers */
#define DEFAULT 0
#define LOWER   1
#define RAISE   2
#define ADJUST  3
#define FUNC    4

/* Layer active when mouse is active? */
#define MOUSE_TP DEFAULT

/* Enable keymap features that require forks */
#define HAS_UROB
#define HAS_MOUSE_KEYS
#define HAS_MOUSE_TP
// #define HAS_CAPSLOCK

// Personal includes
#ifdef HAS_MOUSE_KEYS
     #include "includes/mouse_keys.dtsi"
#endif

#ifdef HAS_MOUSE_TP
     #include "includes/mouse_tp.dtsi"
#endif

/ {
         conditional_layers {
            compatible = "zmk,conditional-layers";
            tri_layer {
               if-layers = <LOWER RAISE>;
               then-layer = <ADJUST>;
            };
        };

        behaviors {
                hm: homerow_mods {
                    compatible = "zmk,behavior-hold-tap";
                    #binding-cells = <2>;
                    tapping-term-ms = <150>;
                    quick-tap-ms = <0>;
                    flavor = "tap-preferred";
                    bindings = <&kp>, <&kp>;
                };
                LEFT_HOME: tap_dance_left_home {
                    compatible = "zmk,behavior-tap-dance";
                    #binding-cells = <0>;
                    tapping-term-ms = <130>;
                    bindings = <&kp LEFT>, <&kp HOME>;
                };
                RIGHT_END: tap_dance_right_end {
                    compatible = "zmk,behavior-tap-dance";
                    #binding-cells = <0>;
                    tapping-term-ms = <130>;
                    bindings = <&kp RIGHT>, <&kp END>;
                };
        };

        keymap {
                compatible = "zmk,keymap";

                default_layer {
                        bindings = <
   &kp GRAVE  &kp SEMI   &kp COMMA  &kp PERIOD  &kp P       &kp Y          &kp F       &kp G        &kp C       &kp R      &kp L      &kp BSPC
   &kp TAB    &hm LGUI A &hm LALT O &hm LSHFT E &hm LCTRL U &kp I          &kp D       &hm RCTRL H  &hm RSHFT T &hm RALT N &hm RGUI S &kp BSLH
   &trans     &kp SQT    &kp Q      &kp J       &kp K       &kp X          &kp B       &kp M        &kp W       &kp V      &kp Z      &kp FSLH
                                                &mo FUNC    &lt LOWER ESC  &kp SPACE   &kp RET      &mo RAISE   &trans
                        >;
                };
                lower_layer {
                        bindings = <
   &kp N7    &kp N5    &kp N3         &kp N1       &kp N9        &kp N0       &kp N2     &kp N4     &kp N6    &kp N8    &RIGHT_END   &kp BSPC
   &trans    &trans    &msc SCRL_DOWN &mkp LCLK    &mkp RCLK     &msc SCRL_UP &trans     &LEFT_HOME &trans    &trans    &trans       &trans
   &trans    &trans    &trans         &kp DOWN     &kp UP        &trans       &trans     &trans     &trans    &trans    &kp KP_MINUS &trans
                                      &mo FUNC     &lt LOWER ESC &kp SPACE    &kp RET    &mo RAISE  &trans
                        >;
                };
                raise_layer {
                        bindings = <
   &trans &trans &trans   &kp RBRC &kp LBRC      &trans      &trans    &trans    &trans    &kp PLUS &kp DLLR  &trans
   &trans &kp AT &kp EXCL &kp RBKT &kp LBKT      &trans      &kp PRCNT &kp CARET &kp EQUAL &kp AMPS &kp ASTRK &trans
   &trans &trans &trans   &kp RPAR &kp LPAR      &trans      &trans    &kp HASH  &trans    &trans   &kp UNDER &trans
                          &mo FUNC &lt LOWER ESC &kp SPACE   &kp RET   &mo RAISE &trans
                        >;
                };
                adjust_layer {
                        bindings = <
   &trans &trans &bt BT_SEL 3 &bt BT_SEL 1 &bt BT_PRV    &bt BT_SEL 0      &bt BT_SEL 2 &bt BT_SEL 4 &bt BT_CLR &trans     &trans  &trans
   &trans &trans &out OUT_TOG &trans       &trans        &trans            &trans       &trans       &trans     &bt BT_NXT &trans  &trans
   &trans &trans &trans       &trans       &trans        &trans            &trans       &trans       &trans     &trans     &trans  &trans
                              &trans       &lt LOWER ESC &kp SPACE         &kp RET      &mo RAISE    &trans
                        >;
                };
                functional_layer {
                        bindings = <
   &kp F7 &kp F5 &kp F3 &kp F1 &kp F9        &kp F10     &kp F2    &kp F4    &kp F6 &kp F8 &kp F11 &kp F12
   &trans &trans &trans &trans &trans        &trans      &trans    &trans    &trans &trans &trans  &trans
   &trans &trans &trans &trans &trans        &trans      &trans    &trans    &trans &trans &trans  &trans
                        &trans &lt LOWER ESC &kp SPACE   &kp RET   &mo RAISE &trans
                        >;
                };
        };
};

/* vim: set ft=c tw=174: */
